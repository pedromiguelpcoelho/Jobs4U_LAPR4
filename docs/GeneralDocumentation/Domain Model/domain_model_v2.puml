@startuml
hide methods
hide circle
hide attributes

'skinparam linetype ortho
'skinparam linetype polyline
skinparam packageStyle rect

skinparam class {
    BackgroundColor LightBlue
    ArrowColor Black
    BorderColor Black
    FontColor Black
    FontSize 14
}

skinparam relationship {
    ArrowColor Black
    ArrowFontColor Black
    ArrowFontSize 14
}












package "Candidate Aggregate" {
class Candidate <<Entity>> <<Root>>

class CurriculumVitae <<Value Object>>
class CandidateName <<Value Object>>
class CandidatePhoneNumber <<Value Object>>
class CandidateEmail <<Value Object>>
class CandidateAddress <<Value Object>>
class Rank <<Value Object>>


Candidate "1" --> "0...*" CurriculumVitae : can have
Candidate "1"--> "1" CandidateName : has a
Candidate "1" --> "1" CandidatePhoneNumber : has a
Candidate "1" --> "1" CandidateEmail : has a
Candidate "1" --> "1" CandidateAddress : has a
Candidate "1" --> "1" Rank : can be listed by

}


package "Customer Aggregate" {
class Customer <<Entity>> <<Root>>

class CustomerName <<Value Object>>
class CustomerPhoneNumber <<Value Object>>
class CustomerEmail <<Value Object>>
class CustomerAddress <<Value Object>>


Customer "1"--> "1" CustomerName : has a
Customer "1" --> "1" CustomerPhoneNumber : has a
Customer "1" --> "1" CustomerEmail : has a
Customer "1" --> "1" CustomerAddress : has a

}


package "Application Aggregate" {
class Application <<Entity>> <<Root>>

class Date <<Value Object>>
class State <<Value Object>>

Application "1" --> "1" Date : has a
Application "1" -->"1" State : has a
}


package "Job Opening Aggregate" {
class JobOpening <<Entity>> <<Root>>

class Company <<Value Object>>
class CompanyAddress <<Value Object>>
class JobReference <<Value Object>>
class ContractType <<Enum>>
class Function <<Value Object>>
class Mode <<Value Object>>
class Vacancies <<Value Object>>
class Requirements <<Value Object>>
class Phase <<Value Object>>
class PhaseType <<Value Object>>
class Period <<Value Object>>
class PhaseStatus <<Value Object>>
class Description <<Value Object>>
class Results <<Value Object>>
class Date <<Value Object>>
class NumberOfApplicants <<Value Object>>
class Address <<Value Object>>

JobOpening "1" --> "0..1" Company : can have a
Company "1" --> "1" CompanyAddress : has
JobOpening "1" --> "1" JobReference : has a unique
JobOpening "1..*" --> "1" ContractType : has a
JobOpening "1..*" --> "1" Function : has a
JobOpening "1" --> "1..*" Mode : has a
JobOpening "1" --> "1" Vacancies : has
JobOpening "1" --> "1..*" Requirements : has a list
JobOpening "1" --> "5..6" Phase : have multiple
Phase "1" --> "1" PhaseStatus : has a
Phase "1" --> "1" PhaseType : has a
Phase "1" --> "1" Description : described by
Phase "1" --> "1" Period : lasts
JobOpening "1" --> "1" Results : has a
JobOpening "1" --> "1" Date : has a
JobOpening "1" --> "1" NumberOfApplicants : has
JobOpening "1..*" --> "0..1" Address : can have

}

package "Interview Aggregate" {
class Interview <<Entity>> <<Root>>


class InterviewModel <<Value Object>>
class Date <<Value Object>>
class Hour <<Value Object>>
class Grade <<Value Object>>


Interview "1..*" --> "1" Date : has a schedule
Interview "1..*" --> "1" InterviewModel : has a
Interview "1..*" --> "1" Hour : has a schedule
Interview "1" --> "1" Grade : assigned

}


JobOpening "1..*" ---down-> "1"Customer :done by
Candidate "1" ---down-> "1..*" Interview : has
Interview "1..*" ---down-> "1" Application : for an
Application ---down-> JobOpening : for an
Candidate -down----> Application : sends an


@enduml