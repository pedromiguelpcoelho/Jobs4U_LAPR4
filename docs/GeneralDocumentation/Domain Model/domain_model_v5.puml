@startuml

title <size:28>Domain Model</size>

hide methods
hide circle
hide attributes

'skinparam linetype ortho
'skinparam linetype polyline
skinparam packageStyle rect

skinparam class {
    BackgroundColor LightBlue
    ArrowColor Black
    BorderColor Black
    FontColor Black
    FontSize 14
}

skinparam relationship {
    ArrowColor Black
    ArrowFontColor Black
    ArrowFontSize 14
}

package "Candidate Aggregate" {
class Candidate <<Entity>> <<Root>>

class CandidateName <<Value Object>>
class CandidatePhoneNumber <<Value Object>>
class CandidateEmail <<Value Object>> <<ID>>

Candidate "1"--> "1" CandidateName : has a
Candidate "1" --> "1" CandidatePhoneNumber : has a
Candidate "1" --> "1" CandidateEmail : has a
}

package "Customer Aggregate" {
class Customer <<Entity>> <<Root>>

class CustomerName <<Value Object>>
class CustomerPhoneNumber <<Value Object>>
class CustomerEmail <<Value Object>><<ID>>
class CustomerAddress <<Value Object>>

Customer "1"--> "1" CustomerName : has a
Customer "1" --> "1" CustomerPhoneNumber : has a
Customer "1" --> "1" CustomerEmail : has a
Customer "1" --> "1" CustomerAddress : has a

}

package "JobApplication Aggregate" {
class JobApplication <<Entity>> <<Root>>

class Date <<Value Object>>
class State <<Value Object>>
class Rank <<Value Object>>
class File <<Value Object>>

JobApplication "1" --> "1" Date : has a
JobApplication "1" -->"1" State : has a
JobApplication "1" --> "1" Rank : can be listed by

}

package "Job Opening Aggregate" {
class JobOpening <<Entity>> <<Root>>

class Company <<Value Object>>
class Address <<Value Object>>
class JobReference <<Value Object>> <<ID>>
class ContractType <<Value Object>>
class Function <<Value Object>>
class Mode <<Value Object>>
class Vacancies <<Value Object>>
class Phase <<Value Object>>
class PhaseName <<Value Object>>
class Period <<Value Object>>
class PhaseStatus <<Value Object>>
class Description <<Value Object>>
class Results <<Value Object>>
class StartDate <<Value Object>>
class EndDate <<Value Object>>

class NumberOfApplicants <<Value Object>>
class Address <<Value Object>>

JobOpening "1" --> "0..1" Company : can have a
Company "1" ---> "1" Address : has
JobOpening "1" --> "1" JobReference : has a unique
JobOpening "1..*" --> "1" ContractType : has a
JobOpening "1..*" --> "1" Function : has a
JobOpening "1" --> "1" Mode : has a
JobOpening "1" --> "1" Vacancies : has
JobOpening "1" --> "4..5" Phase : have multiple
Phase "1" ---> "1" PhaseStatus : has a
Phase "1" ---> "1" PhaseName : has a
Phase "1" ---> "1" Description : described by
Phase "1" ---> "1" Period : lasts
JobOpening "1" --> "1" Results : has a
JobOpening "1" --> "1" StartDate : has a
JobOpening "1" --> "1" EndDate : has a
JobOpening "1" --> "1" NumberOfApplicants : has
JobOpening "1..*" --> "0..1" Address : can have

}

package "Interview Aggregate" {
class Interview <<Entity>> <<Root>>


class Date <<Value Object>>
'class Hour <<Value Object>>
class Grade <<Value Object>>

Interview "1..*" --> "1" Date : has a scheduled
'Interview "1..*" --> "1" Hour : has a scheduled
Interview "1" --> "1" Grade : assigned

}

JobOpening "1..*" ---down-> "1" Customer : done by
'Candidate "1" ---down-> "0..*" Interview : has
Interview "0..*" <---down- "1" JobOpening : can have
JobApplication "*" ---down-> "1" JobOpening : for an
Candidate "1" <-down---- "*" JobApplication : is sent by

package "Interview Model Aggregate"{
class InterviewModel <<Entity>> <<Root>>

class InterviewName <<Value Object>> <<ID>>
class ClassName <<Value Object>>
class Description <<Value Object>>

InterviewModel "1" -->"1" InterviewName : has a
InterviewModel "1" --> "1" ClassName : has a
InterviewModel "1" --> "1" Description : has a
}
InterviewModel "0..*" <-down- "1" Interview : has a

package "Requirement Aggregate"{
class Requirement <<Entity>> <<Root>>

class RequirementName <<Value Object>> <<ID>>
class ClassName <<Value Object>>
class Description <<Value Object>>

Requirement "1" -->"1" RequirementName : has a
Requirement "1" --> "1" ClassName : has a
Requirement "1" --> "1" Description : has a
}
Requirement "0..1" <-down- "1" JobOpening : has a



File "1" <-- "1" JobApplication : has

@enduml