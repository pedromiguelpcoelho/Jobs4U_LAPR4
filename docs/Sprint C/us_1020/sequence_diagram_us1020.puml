@startuml
title <size:20>Sequence Diagram 1020</size>

'http://plantuml.com/skinparam.html
skinparam monochrome false
skinparam packageStyle rect
skinparam defaultFontName FG Virgil
skinparam shadowing false

actor CustomerManager as Actor #lightblue
participant ":PublishResultsUI" as UI <<presentation>>
participant ":PublishResultsController" as Controller <<application>>
participant ":PublishResultsService" as Service <<service>>
participant ":JobOpeningRepository" as JobOpeningRepository <<repository>>
participant ":RankRepository" as repository <<repository>>
participant ":EmailService" as EmailService <<service>>

activate Actor
Actor -> UI : Asks to publish results
activate UI

UI --> Actor: Ask for job reference of the job opening
Actor -> UI: Types job reference of the job opening
UI -> Controller**: create
UI -> Controller : publishResults(jobOpeningReference)
activate Controller
Controller -> Service : notifyCandidatesAndCustomers(jobReference)
activate Service

Service -> JobOpeningRepository:findJobOpeningsByPhase(PhaseType.RESULTS)
activate JobOpeningRepository

JobOpeningRepository --> Service:List<JobOpenings>
deactivate JobOpeningRepository

loop foreach jobOpening

Service -> repository : findAll()

activate repository

repository --> Service : List<Rank>
deactivate repository

loop foreach ranking

loop foreach order
alt if   order   !=   null


Service -> EmailService:sendEmail(candidateEmail,subject,message)
activate EmailService
Service -> Service: saveEmailMessage(candidateEmail,subject,message)
deactivate EmailService
end alt
end loop

alt if candidates were accepted

Service -> EmailService:sendEmail(customerEmail, subject, message)
activate EmailService
Service -> Service: saveEmailMessage(customerEmail, subject, message)


deactivate EmailService
end loop
end alt
end loop

Service --> Controller: confirmation
Controller --> UI: confirmation

deactivate Service

deactivate Controller

UI --> Actor : displays operation info message
deactivate UI

@enduml