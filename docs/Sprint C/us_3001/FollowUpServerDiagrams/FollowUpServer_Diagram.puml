@startuml
title FollowUpServer Diagram_US3001


box "FollowUpServer" #lightgreen
participant ":RcompServer" as Rcomp
participant ":Server" as server
participant ":SemaphoreForServer" as semaphore
participant ":Thread" as thread
participant ":SimpleHandler" as simple
participant ":Handler" as handler
end box

participant "CandidateApp"  as Capp #orange


box "Core" #lightblue
participant ":Translator" as translator
participant ":Email" as email <<value object>>
participant ":CustomerRepository" as customer <<repository>>
participant ":ListNotificationJobApplicationController" as NotificationsController <<application>>
participant ":ListNotificationJobApplicationService" as NotificationsService <<service>>
participant ":JobApplication" as O <<entity>>
participant ":CandidateRepository" as candidatee <<repository>>
end box

activate Rcomp
Rcomp -> server**: new Server(PORT)
activate server
server -> semaphore: instance().activateCriticalSection()
activate semaphore

alt true
semaphore --> server: true
server -> thread** : new Thread(serverThreadGroup, new SimpleHandler(serverSocketConnection))
& thread-> simple**: new SimpleHandler(serverSocketConnection)

loop while connected
Capp --> simple: byte[] message
activate Capp
activate simple
simple -> translator: decodeCode(message)
activate translator

alt 0
simple -> simple: sendACK()
else 1
simple -> simple: connected = false
else 4
simple -> simple: authenticate(message)

alt true
simple --> simple: true
simple -> translator: decodeData1(message)
translator --> simple: userEmail
deactivate translator
simple -> email**: new Email(userEmail)
simple -> customer: findByEmail(email)

alt isPresent
simple -> email: get()
end

simple -> candidatee: findByEmail(email)

alt isPresent
simple -> email: get()
end
simple -> simple: sendACK()

else false
simple --> simple: false
simple -> simple: sendERR()
end

else 9
simple -> NotificationsController**: create()
activate NotificationsController
simple -> NotificationsController: listNotificationJobApplications()
NotificationsController -> NotificationsService**: create()
activate NotificationsService
NotificationsController -> NotificationsService: listNotificationJobApplications(email)
NotificationsService -> candidatee: findByCandidateEmail(email)
activate candidatee
candidatee --> NotificationsService: candidate
deactivate candidatee
NotificationsService --> NotificationsController: notificationJobApplication list
deactivate NotificationsService
NotificationsController --> simple: notificationJobApplication list
deactivate NotificationsController
simple -> simple: sendSHOW_NOTIF_JOB_APPLICATIONS(applicationList)
simple -> translator: serializeNotificationJobApplication(list)
activate translator
translator --> simple: byte[] message
deactivate translator
simple -> Capp: writeObject(Translator.encode(1, MessageCode.SHOW_NOTIF_JOB_APPLICATIONS, data, null))
deactivate Capp
deactivate simple
end

else false
semaphore --> server: false
deactivate semaphore
server --> Rcomp: Could not accept new connection. The server is full!
deactivate server
end

@enduml